#+TITLE:     lispy.el documentation
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css"/>

[[https://github.com/abo-abo/lispy][Back to github.]]

* Setup                                                                               :noexport:
#+begin_src emacs-lisp :exports results :results silent
(defun make-html-cursor--replace (x)
  (if (string= "||\n" x)
      "<cursor> </cursor>\n"
    (format "<cursor>%s</cursor>"
            (regexp-quote
             (substring x 2)))))
(defun make-html-cursor (str x y)
  (replace-regexp-in-string
   "||\\(.\\|\n\\)"
   #'make-html-cursor--replace
   str))

(setq org-export-filter-src-block-functions '(make-html-cursor))
(setq org-html-validation-link nil)
(setq org-html-postamble nil)
(setq org-html-preamble "<link rel=\"icon\" type=\"image/x-icon\" href=\"https://github.com/favicon.ico\"/>")
(setq org-html-text-markup-alist
  '((bold . "<b>%s</b>")
    (code . "<kbd>%s</kbd>")
    (italic . "<i>%s</i>")
    (strike-through . "<del>%s</del>")
    (underline . "<span class=\"underline\">%s</span>")
    (verbatim . "<code>%s</code>")))
(setq org-html-style-default nil)
(setq org-html-head-include-scripts nil)
#+end_src

* Global bindings
| key | function name         |
|-----+-----------------------|
| ]   | [[id:d1065cb0-4b22-4d0c-9aad-a96eee0f4b54][lispy-forward]]         |
| [   | [[id:a0171dbc-b2d6-4196-ad1e-f8a7c860dd9b][lispy-backward]]        |
| (   | [[id:bdff1e23-07d0-4e84-b1ac-7b55ae0e0da7][lispy-parens]]          |
| {   | [[id:d985a611-5a63-4107-9041-da36702d5522][lispy-braces]]          |
| }   | [[id:83c46b4b-0417-4048-9240-d6fd686bbe21][lispy-brackets]]        |
| C-1 | [[id:54752047-032c-4f0d-97ac-ed9baefa3649][lispy-describe-inline]] |
| C-2 | [[id:54becf27-661c-4c5d-92d8-baa22a50291d][lispy-arglist-inline]]  |
| C-3 | [[id:79f14a39-011b-48bd-82a4-4c1587514948][lispy-out-forward]]     |
| C-4 | [[id:bd0758f8-4bb7-4154-af69-81368993184b][lispy-x]]               |
|-----+-----------------------|
* Local bindings
| key | function name                 |
|-----+-------------------------------|
| j   | [[id:778c5418-17aa-4350-a8c4-e5fb07ecca16][lispy-down]]                    |
| k   | [[id:eab5e8e4-3afb-40af-a7dc-8649b3b44877][lispy-up]]                      |
| d   | [[id:bde67516-dfce-4e5a-b30d-9eb52ade7e3e][lispy-different]]               |
| q   | [[id:94b1a983-c847-4cb0-9c46-019f058c05a9][lispy-ace-paren]]               |
| h   | [[id:0c51e02a-e411-4d68-97da-083db9584dc6][lispy-ace-symbol]]              |
| F   | [[id:d3799a39-d3e0-4aa5-bff1-bae4c0baa5cf][lispy-follow]]                  |
| e   | [[id:117f2392-b4ff-4391-834a-7044cc850778][lispy-eval]]                    |
| E   | [[id:d38ff2d2-e49f-438e-b2dc-70308586cd8a][lispy-eval-and-insert]]         |
| b   | [[id:3ddf7d0f-83c9-4880-b170-ce36c549c537][lispy-store-region-and-buffer]] |
| B   | [[id:c5f1cde9-1712-497a-afc2-356cd0dce702][lispy-ediff-regions]]           |
| xl  | [[id:0333708a-609e-4619-a0d4-4507397c5c25][lispy-to-lambda]]               |
| xd  | [[id:0ace5ddb-2500-4deb-9ef9-e806aae7475b][lispy-to-defun]]                |
| J   | [[id:637e7ef8-31b0-4512-99d9-386de877b40e][lispy-outline-next]]            |
| K   | [[id:caaf39aa-1860-43a9-a5ea-5fac9ca9a23c][lispy-outline-prev]]            |
| I   | [[id:164552ee-b92d-4af6-9570-60d039876fac][lispy-shifttab]]                |
| i   | [[id:5f945b62-0189-4c77-ae63-d0d5c72cc056][lispy-tab]]                     |
|-----+-------------------------------|

* Function reference
** =lispy-forward=
:PROPERTIES:
:ID:       d1065cb0-4b22-4d0c-9aad-a96eee0f4b54
:END:

Bound to ~]~.

Works as replacement for the standard =forward-list=.

Takes a numeric prefix =arg= and moves forward list =arg= times or
until error.

Unlike =forward-list=, no error will be reported if it's not possible
to move =arg= times.
It that case, move as many times as possible.

Return =t= if could move at least once, otherwise
call [[id:79f14a39-011b-48bd-82a4-4c1587514948][=lispy-out-forward=]] and return =nil=.

Unlike =forward-list=, parens in strings and comments are ignored.
-----
** =lispy-backward=
:PROPERTIES:
:ID:       a0171dbc-b2d6-4196-ad1e-f8a7c860dd9b
:END:

Bound to ~[~.

Works as replacement for the standard =backward-list=.

Takes a numeric prefix =arg= and moves backward list =arg= times or
until error.

Unlike =backward-list=, no error will be reported if it's not possible
to move =arg= times.
It that case, move as many times as possible.

Return =t= if could move at least once, otherwise
call =lispy-out-backward= and return =nil=.

Unlike =backward-list=, parens in strings and comments are ignored.
-----

** =lispy-out-forward=
:PROPERTIES:
:ID:       79f14a39-011b-48bd-82a4-4c1587514948
:END:

Bound to ~C-3~.

Works as replacement for the standard =up-list=.

Takes a numeric prefix =arg= and moves up forward list =arg= times or
until error.

Unlike =up-list=, no error will be reported if it's not possible
to move up =arg= times.
It that case, move as many times as possible.

Return point if could move at least once, otherwise
do nothing and return =nil=.

Unlike =up-list=, parens in strings and comments are ignored.
-----
** =lispy-down=
:PROPERTIES:
:ID:       778c5418-17aa-4350-a8c4-e5fb07ecca16
:END:

Bound to ~j~.

Takes a numeric prefix =arg= and moves down the current list =arg= times.

Here, current list means the innermost list that contains the point.
Moving down means so literally only if there is a newline after
each element of current list, otherwise it's down or left.

~j~ maintains a guarantee that it will not exit the current list, so
you can use e.g. ~99j~ to move to the last element of current list.

When it's not possible to move down any more, ~j~ will
behave as [[id:bde67516-dfce-4e5a-b30d-9eb52ade7e3e][=lispy-different=]]. This allows to traverse the current
list's elements with just ~j~ and ~k~.

When region is active, ~j~ will call =forward-sexp=.
This allows to:

- grow the region when point is at =region-end=
- shrink the region when point is at =region-beginning=
-----

** =lispy-up=
:PROPERTIES:
:ID:       eab5e8e4-3afb-40af-a7dc-8649b3b44877
:END:

Bound to ~k~.

Takes a numeric prefix =arg= and moves up the current list =arg= times.

Here, current list means the innermost list that contains the point.
Moving up means so literally only if there is a newline after
each element of current list, otherwise it's up or right.

~k~ maintains a guarantee that it will not exit the current list, so
you can use e.g. ~99k~ to move to the first element of current list.

When it's not possible to move up any more, ~k~ will
behave as [[id:bde67516-dfce-4e5a-b30d-9eb52ade7e3e][=lispy-different=]]. This allows to traverse the current
list's elements with just ~j~ and ~k~.

When region is active, ~k~ will call =backward-sexp=.
This allows to:

- shrink the region when point is at =region-end=
- grow the region when point is at =region-beginning=
-----

** =lispy-different=
:PROPERTIES:
:ID:       bde67516-dfce-4e5a-b30d-9eb52ade7e3e
:END:

Bound to ~d~.

Switch to the different side of current sexp.

When region is active, equivalent to =exchange-point-and-mark=.
-----

** =lispy-ace-paren=
:PROPERTIES:
:ID:       94b1a983-c847-4cb0-9c46-019f058c05a9
:END:
Starting with this:
#+begin_src emacs-lisp
(defun lispy-define-key (keymap key def &optional from-start)
  "Forward to (`define-key' KEYMAP KEY (`lispy-defun' DEF FROM-START))."
  (let ((func (defalias (intern (concat "special-" (symbol-name def)))
                  (lispy--insert-or-call def from-start))))
    ||(unless (member func ac-trigger-commands)
      (push func ac-trigger-commands))
    (unless (member func company-begin-commands)
      (push func company-begin-commands))
    (eldoc-add-command func)
    (define-key keymap (kbd key) func)))
#+end_src
by pressing ~q~ you get this:

# (progn
#   (lispy-ace-paren)
#   (htmlize-buffer))

#+BEGIN_HTML
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<!-- Created by htmlize-1.47 in css mode. -->
<html>
  <head>
    <title>temp</title>
    <style type="text/css">
    <!--
      body {
        color: #000000;
        background-color: #ffffff;
      }
      .ace-jump-face-background {
        /* ace-jump-face-background */
        color: #666666;
      }
      .ace-jump-face-foreground {
        /* ace-jump-face-foreground */
        color: #ff0000;
      }
      .constant {
        /* font-lock-constant-face */
        color: #110099;
      }
      .doc {
        /* font-lock-doc-face */
        color: #2A00FF;
      }
      .function-name {
        /* font-lock-function-name-face */
        font-weight: bold;
      }
      .keyword {
        /* font-lock-keyword-face */
        color: #7F0055;
        font-weight: bold;
      }
      .string {
        /* font-lock-string-face */
        color: #2A00FF;
      }
      .type {
        /* font-lock-type-face */
        color: #000000;
        font-style: italic;
        text-decoration: underline;
      }

      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
    -->
    </style>
  </head>
  <body>
    <pre>
<span class="ace-jump-face-background"><span class="ace-jump-face-foreground">a</span></span><span class="keyword"><span class="ace-jump-face-background">defun</span></span><span class="ace-jump-face-background"> </span><span class="function-name"><span class="ace-jump-face-background">lispy-define-key</span></span><span class="ace-jump-face-background"> </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">b</span></span><span class="ace-jump-face-background">keymap key def </span><span class="type"><span class="ace-jump-face-background">&amp;optional</span></span><span class="ace-jump-face-background"> from-start)
  </span><span class="doc"><span class="ace-jump-face-background">"Forward to </span></span><span class="doc"><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">c</span></span></span><span class="doc"><span class="ace-jump-face-background">`</span></span><span class="doc"><span class="constant"><span class="ace-jump-face-background">define-key</span></span></span><span class="doc"><span class="ace-jump-face-background">' KEYMAP KEY </span></span><span class="doc"><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">d</span></span></span><span class="doc"><span class="ace-jump-face-background">`</span></span><span class="doc"><span class="constant"><span class="ace-jump-face-background">lispy-defun</span></span></span><span class="doc"><span class="ace-jump-face-background">' DEF FROM-START))."</span></span><span class="ace-jump-face-background">
  </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">e</span></span><span class="keyword"><span class="ace-jump-face-background">let</span></span><span class="ace-jump-face-background"> </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">fg</span></span><span class="ace-jump-face-background">func </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">h</span></span><span class="keyword"><span class="ace-jump-face-background">defalias</span></span><span class="ace-jump-face-background"> </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">i</span></span><span class="function-name"><span class="ace-jump-face-background">intern</span></span><span class="ace-jump-face-background"> </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">j</span></span><span class="ace-jump-face-background">concat </span><span class="string"><span class="ace-jump-face-background">"special-"</span></span><span class="ace-jump-face-background"> </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">k</span></span><span class="ace-jump-face-background">symbol-name def)))
                  </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">l</span></span><span class="ace-jump-face-background">lispy--insert-or-call def from-start))))
    </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground"><cursor>m</cursor></span></span><span class="keyword"><span class="ace-jump-face-background">unless</span></span><span class="ace-jump-face-background"> </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">n</span></span><span class="ace-jump-face-background">member func ac-trigger-commands)
      </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">o</span></span><span class="ace-jump-face-background">push func ac-trigger-commands))
    </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">p</span></span><span class="keyword"><span class="ace-jump-face-background">unless</span></span><span class="ace-jump-face-background"> </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">q</span></span><span class="ace-jump-face-background">member func company-begin-commands)
      </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">r</span></span><span class="ace-jump-face-background">push func company-begin-commands))
    </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">s</span></span><span class="ace-jump-face-background">eldoc-add-command func)
    </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">t</span></span><span class="ace-jump-face-background">define-key keymap </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">u</span></span><span class="ace-jump-face-background">kbd key) func)))</span></pre>
  </body>
</html>
#+END_HTML

Now you can change the point position by pressing a letter or
cancel with ~C-g~.
-----

** =lispy-ace-symbol=
:PROPERTIES:
:ID:       0c51e02a-e411-4d68-97da-083db9584dc6
:END:
Starting with this:
#+begin_src emacs-lisp
(defun lispy-define-key (keymap key def &optional from-start)
  "Forward to (`define-key' KEYMAP KEY (`lispy-defun' DEF FROM-START))."
  (let ((func (defalias (intern (concat "special-" (symbol-name def)))
                  (lispy--insert-or-call def from-start))))
    ||(unless (member func ac-trigger-commands)
      (push func ac-trigger-commands))
    (unless (member func company-begin-commands)
      (push func company-begin-commands))
    (eldoc-add-command func)
    (define-key keymap (kbd key) func)))
#+end_src
by pressing ~h~ you get this:

# (progn
#   (lispy-ace-symbol)
#   (htmlize-buffer))

#+BEGIN_HTML
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<!-- Created by htmlize-1.47 in css mode. -->
<html>
  <head>
    <title>*Org Src oblog-min.org[ emacs-lisp ]*</title>
    <style type="text/css">
    <!--
      body {
        color: #000000;
        background-color: #ffffff;
      }
      .ace-jump-face-background {
        /* ace-jump-face-background */
        color: #666666;
      }
      .ace-jump-face-foreground {
        /* ace-jump-face-foreground */
        color: #ff0000;
      }
      .constant {
        /* font-lock-constant-face */
        color: #110099;
      }
      .doc {
        /* font-lock-doc-face */
        color: #2A00FF;
      }
      .function-name {
        /* font-lock-function-name-face */
        font-weight: bold;
      }
      .keyword {
        /* font-lock-keyword-face */
        color: #7F0055;
        font-weight: bold;
      }
      .string {
        /* font-lock-string-face */
        color: #2A00FF;
      }
      .type {
        /* font-lock-type-face */
        color: #000000;
        font-style: italic;
        text-decoration: underline;
      }

      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
    -->
    </style>
  </head>
  <body>
    <pre>
<span class="ace-jump-face-background">(</span><span class="keyword"><span class="ace-jump-face-background">defun</span></span><span class="ace-jump-face-background"> </span><span class="function-name"><span class="ace-jump-face-background">lispy-define-key</span></span><span class="ace-jump-face-background"> (keymap key def </span><span class="type"><span class="ace-jump-face-background">&amp;optional</span></span><span class="ace-jump-face-background"> from-start)
  </span><span class="doc"><span class="ace-jump-face-background">"Forward to (`</span></span><span class="doc"><span class="constant"><span class="ace-jump-face-background">define-key</span></span></span><span class="doc"><span class="ace-jump-face-background">' KEYMAP KEY (`</span></span><span class="doc"><span class="constant"><span class="ace-jump-face-background">lispy-defun</span></span></span><span class="doc"><span class="ace-jump-face-background">' DEF FROM-START))."</span></span><span class="ace-jump-face-background">
  (</span><span class="keyword"><span class="ace-jump-face-background">let</span></span><span class="ace-jump-face-background"> ((func (</span><span class="keyword"><span class="ace-jump-face-background">defalias</span></span><span class="ace-jump-face-background"> (</span><span class="function-name"><span class="ace-jump-face-background">intern</span></span><span class="ace-jump-face-background"> (concat </span><span class="string"><span class="ace-jump-face-background">"special-"</span></span><span class="ace-jump-face-background"> (symbol-name def)))
                  (lispy--insert-or-call def from-start))))
    </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground"><cursor>a</cursor></span></span><span class="keyword"><span class="ace-jump-face-background">unless</span></span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">b</span></span><span class="ace-jump-face-background">(member</span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">c</span></span><span class="ace-jump-face-background">func</span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">d</span></span><span class="ace-jump-face-background">ac-trigger-commands)
     </span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">e</span></span><span class="ace-jump-face-background">(push</span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">f</span></span><span class="ace-jump-face-background">func</span><span class="ace-jump-face-background"><span class="ace-jump-face-foreground">g</span></span><span class="ace-jump-face-background">ac-trigger-commands))
    (</span><span class="keyword"><span class="ace-jump-face-background">unless</span></span><span class="ace-jump-face-background"> (member func company-begin-commands)
      (push func company-begin-commands))
    (eldoc-add-command func)
    (define-key keymap (kbd key) func)))</span></pre>
  </body>
</html>
#+END_HTML

Now you can mark a symbol by pressing a letter, or cancel with ~C-g~.

Here's the end result of ~hd~:

#+BEGIN_HTML
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<!-- Created by htmlize-1.47 in css mode. -->
<html>
  <head>
    <title>*Org Src oblog-min.org[ emacs-lisp ]*</title>
    <style type="text/css">
    <!--
      body {
        color: #000000;
        background-color: #ffffff;
      }
      .constant {
        /* font-lock-constant-face */
        color: #110099;
      }
      .doc {
        /* font-lock-doc-face */
        color: #2A00FF;
      }
      .function-name {
        /* font-lock-function-name-face */
        font-weight: bold;
      }
      .keyword {
        /* font-lock-keyword-face */
        color: #7F0055;
        font-weight: bold;
      }
      .region {
        /* region */
        color: #ffffff;
        background-color: #f9b593;
      }
      .string {
        /* font-lock-string-face */
        color: #2A00FF;
      }
      .type {
        /* font-lock-type-face */
        color: #000000;
        font-style: italic;
        text-decoration: underline;
      }

      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
    -->
    </style>
  </head>
  <body>
    <pre>
(<span class="keyword">defun</span> <span class="function-name">lispy-define-key</span> (keymap key def <span class="type">&amp;optional</span> from-start)
  <span class="doc">"Forward to (`</span><span class="doc"><span class="constant">define-key</span></span><span class="doc">' KEYMAP KEY (`</span><span class="doc"><span class="constant">lispy-defun</span></span><span class="doc">' DEF FROM-START))."</span>
  (<span class="keyword">let</span> ((func (<span class="keyword">defalias</span> (<span class="function-name">intern</span> (concat <span class="string">"special-"</span> (symbol-name def)))
                  (lispy--insert-or-call def from-start))))
    (<span class="keyword">unless</span> (member func <span class="region">ac-trigger-commands</span><cursor>)</cursor>
      (push func ac-trigger-commands))
    (<span class="keyword">unless</span> (member func company-begin-commands)
      (push func company-begin-commands))
    (eldoc-add-command func)
    (define-key keymap (kbd key) func)))</pre>
  </body>
</html>
#+END_HTML

Now you can follow up with
| key | function name         |
|-----+-----------------------|
| F   | [[id:d3799a39-d3e0-4aa5-bff1-bae4c0baa5cf][lispy-follow]]          |
| C-1 | [[id:54752047-032c-4f0d-97ac-ed9baefa3649][lispy-describe-inline]] |
| e   | [[id:117f2392-b4ff-4391-834a-7044cc850778][lispy-eval]]            |
|-----+-----------------------|
------

** =lispy-follow=
:PROPERTIES:
:ID:       d3799a39-d3e0-4aa5-bff1-bae4c0baa5cf
:END:

When region is active, use ~F~ to jump to the definition of marked symbol.
Otherwise jump to definition of the first symbol in current sexp.

It sets the mark before jumping, so you can use ~C-u C-SPC~ to jump
back within current file or ~C-x C-SPC~ to jump back to previous file.

Elisp, Clojure and Common Lisp are supported.
-----


*** TODO Add support for Scheme                                                     :noexport:
*** TODO Add jump to symbol support for Common Lisp                                 :noexport:

** =lispy-describe-inline=
:PROPERTIES:
:ID:       54752047-032c-4f0d-97ac-ed9baefa3649
:END:

Use ~C-1~ to show the documentation for current function or currently
marked symbol (see [[id:0c51e02a-e411-4d68-97da-083db9584dc6][=lispy-ace-symbol=]]).

#+BEGIN_HTML
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<!-- Created by htmlize-1.47 in css mode. -->
<html>
  <head>
    <title>temp</title>
    <style type="text/css">
    <!--
      body {
        color: #000000;
        background-color: #ffffff;
      }
      .constant {
        /* font-lock-constant-face */
        color: #110099;
      }
      .doc {
        /* font-lock-doc-face */
        color: #2A00FF;
      }
      .function-name {
        /* font-lock-function-name-face */
        font-weight: bold;
      }
      .keyword {
        /* font-lock-keyword-face */
        color: #7F0055;
        font-weight: bold;
      }
      .lispy-face-hint {
        /* lispy-face-hint */
        color: #000000;
        background-color: #fff3bc;
      }
      .string {
        /* font-lock-string-face */
        color: #2A00FF;
      }
      .type {
        /* font-lock-type-face */
        color: #000000;
        font-style: italic;
        text-decoration: underline;
      }

      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
    -->
    </style>
  </head>
  <body>
    <pre>
(<span class="keyword">defun</span> <span class="function-name">lispy-define-key</span> (keymap key def <span class="type">&amp;optional</span> from-start)
  <span class="doc">"Forward to (`</span><span class="doc"><span class="constant">define-key</span></span><span class="doc">' KEYMAP KEY (`</span><span class="doc"><span class="constant">lispy-defun</span></span><span class="doc">' DEF FROM-START))."</span>
  (<span class="keyword">let</span> ((func (<span class="keyword">defalias</span> (<span class="function-name">intern</span> (concat <span class="string">"special-"</span> (symbol-name def)))
                  (lispy--insert-or-call def from-start))))
            <span class="lispy-face-hint">Return non-nil if ELT is an element of LIST.  Comparison done with `equal'.</span>
            <span class="lispy-face-hint">The value is actually the tail of LIST whose car is ELT.</span>

            <span class="lispy-face-hint">(fn ELT LIST)</span>
    (<span class="keyword">unless</span> (member func <cursor>a</cursor>c-trigger-commands)
      (push func ac-trigger-commands))
    (<span class="keyword">unless</span> (member func company-begin-commands)
      (push func company-begin-commands))
    (eldoc-add-command func)
    (define-key keymap (kbd key) func)))</pre>
  </body>
</html>
#+END_HTML
-----

** =lispy-arglist-inline=
:PROPERTIES:
:ID:       54becf27-661c-4c5d-92d8-baa22a50291d
:END:

Use ~C-2~ to show the argument list for current function.

#+BEGIN_HTML
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<!-- Created by htmlize-1.47 in css mode. -->
<html>
  <head>
    <title>lispy-arglist-inline</title>
    <style type="text/css">
    <!--
      body {
        color: #000000;
        background-color: #ffffff;
      }
      .constant {
        /* font-lock-constant-face */
        color: #110099;
      }
      .doc {
        /* font-lock-doc-face */
        color: #2A00FF;
      }
      .function-name {
        /* font-lock-function-name-face */
        font-weight: bold;
      }
      .keyword {
        /* font-lock-keyword-face */
        color: #7F0055;
        font-weight: bold;
      }
      .lispy-face-hint {
        /* lispy-face-hint */
        color: #000000;
        background-color: #fff3bc;
      }
      .lispy-face-req-nosel {
        /* lispy-face-req-nosel */
        color: #000000;
        background-color: #fff3bc;
      }
      .string {
        /* font-lock-string-face */
        color: #2A00FF;
      }
      .type {
        /* font-lock-type-face */
        color: #000000;
        font-style: italic;
        text-decoration: underline;
      }

      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
    -->
    </style>
  </head>
  <body>
    <pre>
(<span class="keyword">defun</span> <span class="function-name">lispy-define-key</span> (keymap key def <span class="type">&amp;optional</span> from-start)
  <span class="doc">"Forward to (`</span><span class="doc"><span class="constant">define-key</span></span><span class="doc">' KEYMAP KEY (`</span><span class="doc"><span class="constant">lispy-defun</span></span><span class="doc">' DEF FROM-START))."</span>
  (<span class="keyword">let</span> ((func (<span class="keyword">defalias</span> (<span class="function-name">intern</span> (concat <span class="string">"special-"</span> (symbol-name def)))
                  (lispy--insert-or-call def from-start))))
            (<span class="lispy-face-hint">member</span> <span class="lispy-face-req-nosel">elt</span> <span class="lispy-face-req-nosel">list</span>)
    (<span class="keyword">unless</span> (member func <cursor>a</cursor>c-trigger-commands)
      (push func ac-trigger-commands))
    (<span class="keyword">unless</span> (member func company-begin-commands)
      (push func company-begin-commands))
    (eldoc-add-command func)
    (define-key keymap (kbd key) func)))</pre>
  </body>
</html>
#+END_HTML
-----

** =lispy-eval=
:PROPERTIES:
:ID:       117f2392-b4ff-4391-834a-7044cc850778
:END:

Use ~e~ to eval current region or sexp.
The result will be displayed in the minibuffer.

Elisp, Clojure, Scheme and Common Lisp are supported.
-----

** =lispy-eval-and-insert=
:PROPERTIES:
:ID:       d38ff2d2-e49f-438e-b2dc-70308586cd8a
:END:

Use ~E~ to eval current region or sexp.
The result will be inserted in the current buffer
after the evaluated expression.

- Starting with =|(= the point will not be moved,
  allowing to press ~E~ again.
- Starting with =)|= the point will end up after the
  inserted expression.
- Starting with an active region, the region will be
  deactivated and result will be inserted at point.
-----

** =lispy-store-region-and-buffer=
:PROPERTIES:
:ID:       3ddf7d0f-83c9-4880-b170-ce36c549c537
:END:

Use ~b~ to store current buffer and region for further usage.  When
region isn't active, store the bounds of current expression instead.

Currently, only [[id:c5f1cde9-1712-497a-afc2-356cd0dce702][=lispy-ediff-regions=]] makes use of stored info.
-----

** =lispy-ediff-regions=
:PROPERTIES:
:ID:       c5f1cde9-1712-497a-afc2-356cd0dce702
:END:

Use ~B~ to call this function. It's comparable to
=ediff-regions-linewise=, except the region and
buffer selection is done differently:

- first buffer and region are defined by [[id:3ddf7d0f-83c9-4880-b170-ce36c549c537][=lispy-store-region-and-buffer=]].
- second buffer and region are the current buffer and region

Buffers can of course be the same.

A useful scenario for this function is ~C-x v ~~
(=vc-revision-other-window=) ~RET~ and then follow up by selecting one
function that was changed with ~b~ in one buffer and with ~B~ in other
buffer.  This results in ediff just for that one single
function. This is helpful if =ediff-buffers= isn't what you want.

Another scenario is to compare two different functions that have similar code,
for instance =lispy-move-down= and =lispy-move-up=.
-----

** =lispy-to-lambda=
:PROPERTIES:
:ID:       0333708a-609e-4619-a0d4-4507397c5c25
:END:

Use ~xl~ (local) or ~C-4 l~ (global) to turn the current function
definition into a lambda.


One use case is when I want to edebug a lambda but not the function
that's using it. So I extract the lambda with [[id:0ace5ddb-2500-4deb-9ef9-e806aae7475b][=lispy-to-defun=]], edebug it and
turn it back into a lambda with this function.

Other use case is that I simply want to get the lambda since
the function isn't used anywhere else.

Starting with this:

#+begin_src emacs-lisp
(defun helm-owiki-action (x)
  (find-file (expand-file-name
              (format "%s.org" x)||
              helm-owiki-directory)))
#+end_src

by pressing ~xl~ you will get this:

#+begin_src emacs-lisp
||(lambda (x)
  (find-file (expand-file-name
              (format "%s.org" x)
              helm-owiki-directory)))
#+end_src
-----
*** TODO Add Clojure support                                                        :noexport:


** =lispy-to-defun=
:PROPERTIES:
:ID:       0ace5ddb-2500-4deb-9ef9-e806aae7475b
:END:

Use ~xd~ (local) or ~C-4 d~ (global) to turn the current lambda
into a defun.

You'll be prompted for a name, the lambda will be replaced with that
name and the new definition will be in the kill ring.

Starting with this:
#+begin_src elisp
(mapcar ||(lambda (x) (* x x))
        (number-sequence 1 10))
#+end_src

by pressing ~xd~ and entering =square= and then pressing ~] ] C-m C-y~
you'll get this:
#+begin_src elisp
(mapcar #'square
        (number-sequence 1 10))
(defun square (x) (* x x))||
#+end_src
-----

** =lispy-parens=
:PROPERTIES:
:ID:       bdff1e23-07d0-4e84-b1ac-7b55ae0e0da7
:END:

Use ~(~ to call [[id:80cb6d3d-f3fe-4c0f-9eaf-e098679aada4][=lispy-pair=]] specialized with =()=.
-----

** =lispy-braces=
:PROPERTIES:
:ID:       d985a611-5a63-4107-9041-da36702d5522
:END:

Use ~{~ to call [[id:80cb6d3d-f3fe-4c0f-9eaf-e098679aada4][=lispy-pair=]] specialized with ={}=.
-----

** =lispy-brackets=
:PROPERTIES:
:ID:       83c46b4b-0417-4048-9240-d6fd686bbe21
:END:

Use ~}~ to call [[id:80cb6d3d-f3fe-4c0f-9eaf-e098679aada4][=lispy-pair=]] specialized with =[]=.
-----

** =lispy-pair=
:PROPERTIES:
:ID:       80cb6d3d-f3fe-4c0f-9eaf-e098679aada4
:END:

This function, taking arguments =left= and =right=, is used to generate
[[id:bdff1e23-07d0-4e84-b1ac-7b55ae0e0da7][=lispy-parens=]],
[[id:d985a611-5a63-4107-9041-da36702d5522][=lispy-braces=]]
and [[id:83c46b4b-0417-4048-9240-d6fd686bbe21][=lispy-brackets=]], which in turn take prefix =arg=.

The result depends on the following conditions, each
tried one by one until one that holds true is found:

*** region active
Wrap the region with =left= and =right=.

*** inside a string before "\\"
Starting with
#+begin_src text-mode
"a regex \\||"
#+end_src
pressing  ~(~ will give:
#+begin_src text-mode
"a regex \\(||\\)"
#+end_src
and pressing ~{~ will give:
#+begin_src text-mode
"a regex \\{||\\}"
#+end_src
and pressing ~}~ will give:
#+begin_src text-mode
"a regex \\[||\\]"
#+end_src
*** inside string or comment
Insert =left=, =right= and put the point between them.

Starting with
#+begin_src text-mode
"a string || "
#+end_src
pressing ~(~ will give:
#+begin_src text-mode
"a string (||)"
#+end_src

*** elisp character expression
Starting with
#+begin_src text-mode
?\||
#+end_src
pressing ~(~ will self-insert it to give:
#+begin_src text-mode
?\(||
#+end_src
This also works for ~)~, ~{~, ~}~.

This doesn't work for ~[~ and ~]~,
they should be inserted with ~C-q [~ and ~C-q ]~.

*** =arg= is 1
1. Re-indent and insert space according to =lispy--space-unless=.
2. Insert =left=, =right= and put the point between them.
3. Insert a space after =right= if it's appropriate.

*** otherwise
Wrap current sexp with =left= and =right=.

Starting with:
#+begin_src emacs-lisp
||(do-some-thing)
(do-other-thing)
#+end_src

pressing ~2(~ will give:
#+begin_src emacs-lisp
(|| (do-some-thing))
(do-other-thing)
#+end_src

~2~ here is responsible to setting =arg= to 2.
-----

** =lispy-x=
:PROPERTIES:
:ID:       bd0758f8-4bb7-4154-af69-81368993184b
:END:

Bound to ~x~ (locally) or ~C-4~ (globally).

Just a prefix to calling other commands, like

| l | [[id:0333708a-609e-4619-a0d4-4507397c5c25][lispy-to-lambda]] |
| d | [[id:0ace5ddb-2500-4deb-9ef9-e806aae7475b][lispy-to-defun]]  |

** =lispy-outline-next=
:PROPERTIES:
:ID:       637e7ef8-31b0-4512-99d9-386de877b40e
:END:

Bound to ~J~.

Takes a numeric prefix =arg= and
calls =outline-next-visible-heading= =arg= times or until
past the last =outline-regexp=.

See [[id:164552ee-b92d-4af6-9570-60d039876fac][=lispy-shifttab=]] for more info.
-----

** =lispy-outline-prev=
:PROPERTIES:
:ID:       caaf39aa-1860-43a9-a5ea-5fac9ca9a23c
:END:

Bound to ~K~.

Takes a numeric prefix =arg= and
calls =outline-previous-visible-heading= =arg= times or until
past the first =outline-regexp=.

See [[id:164552ee-b92d-4af6-9570-60d039876fac][=lispy-shifttab=]] for more info.
-----

** =lispy-shifttab=
:PROPERTIES:
:ID:       164552ee-b92d-4af6-9570-60d039876fac
:END:

Bound to ~I~.

Toggles on/off an =org-mode=-like outline (actually calls
=org-overview=).

=outline-regexp= has to be set in order for this to work.
To see how to set it locally for each file, see
[[https://github.com/abo-abo/lispy/blob/master/lispy.el][the last lines of lispy.el]].

I'm using this [[https://github.com/capitaomorte/yasnippet][yasnippet]] to insert outline comments
(also needs [[https://github.com/abo-abo/auto-yasnippet][auto-yasnippet]] to make use of =aya-tab-position=):

#+begin_src text
# -*- mode: snippet -*-
# name: long_comment
# key: cc
# --
;; ——— $1 ${1:$(repeat-char (- 74 aya-tab-position (length yas-text)) "—")}$0
#+end_src

And here's the short comment:

#+begin_src text
# -*- mode: snippet -*-
# name: comment
# key: c
# --
;; ——— $1 ${1:$(repeat-char (- 40 aya-tab-position (length yas-text)) "—")}$0
#+end_src

Useful together with

| J | [[id:637e7ef8-31b0-4512-99d9-386de877b40e][lispy-outline-next]] |
| K | [[id:caaf39aa-1860-43a9-a5ea-5fac9ca9a23c][lispy-outline-prev]] |
| i | [[id:5f945b62-0189-4c77-ae63-d0d5c72cc056][lispy-tab]]          |
-----

** =lispy-tab=
:PROPERTIES:
:ID:       5f945b62-0189-4c77-ae63-d0d5c72cc056
:END:

Bound to ~i~.

Indent code.

When in outline, hide/show outline.
-----
