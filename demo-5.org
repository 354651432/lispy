#+TITLE:     lispy.el demo 5: ->>ification
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="demo-style.css"/>

| [[https://github.com/abo-abo/lispy][Back to github]] | [[https://raw.githubusercontent.com/abo-abo/lispy/gh-pages/demo-5.org][This file in org-mode]] | [[http://abo-abo.github.io/lispy/][Function reference]] |

* Setup                                                                               :noexport:
#+begin_src emacs-lisp :exports results :results silent
(load-file "make-html.el")
(setq org-export-filter-src-block-functions '(make-html-region))
(setq org-html-validation-link nil)
(setq org-html-postamble nil)
(setq org-html-preamble "<link rel=\"icon\" type=\"image/x-icon\" href=\"https://github.com/favicon.ico\"/>")
(setq org-html-text-markup-alist
  '((bold . "<b>%s</b>")
    (code . "<kbd>%s</kbd>")
    (italic . "<i>%s</i>")
    (strike-through . "<del>%s</del>")
    (underline . "<span class=\"underline\">%s</span>")
    (verbatim . "<code>%s</code>")))
(setq org-html-style-default nil)
(setq org-html-head-include-scripts nil)
#+end_src

* Intro
This demo covers some very basic lispy commands such as:
- move code up/down with ~w~ / ~s~
- grow/shrink current list with ~>~ / ~<~

* Task summary
Transform from:
#+begin_src clojure
|(map #(* % %) (filter odd? [1 2 3 4 5]))
#+end_src
to:
#+begin_src clojure
|(->> [1 2 3 4 5]
  (filter odd?)
  (map #(* % %)))
#+end_src
* Screencast
The screencast for this demo is here: http://youtu.be/N7C3FX4mr_o
* Step-by-step expansion
** step 1
~2(~ to wrap with parens, enter =->>=:
#+begin_src clojure
(->>| (map #(* % %) (filter odd? [1 2 3 4 5])))
#+end_src
** step 2
- ~C-f~ to get into special
- ~d~ to switch to the different side
- ~<~ to shrink list

#+begin_src clojure
(->> (map #(* % %))| (filter odd? [1 2 3 4 5]))
#+end_src
** step 3
- ~j~ to move the cursor down by one sexp
- ~<~ to shrink again
#+begin_src clojure
(->> (map #(* % %)) (filter odd?)| [1 2 3 4 5])
#+end_src
** step 4
- ~j~ to move the cursor down
- ~ww~ to move the expression up twice
#+begin_src clojure
(->> [1 2 3 4 5]| (map #(* % %)) (filter odd?))
#+end_src
** step 5
- ~js~ to select =map= and move it down once
#+begin_src clojure
(->> [1 2 3 4 5] (filter odd?) (map #(* % %))|)
#+end_src
** step 6
- ~C-f~ or ~C-3~ to exit the list
- ~M~ to multiline
#+begin_src clojure
(->> [1 2 3 4 5]
     (filter odd?)
     (map #(* % %)))|
#+end_src

#+BEGIN_HTML
<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
#+END_HTML
